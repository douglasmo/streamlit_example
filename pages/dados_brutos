import streamlit as st 
import requests
import pandas as pd 
import numpy as np 
import plotly.express as px 
import time


@st.cache_data
def converte_csv(df):
    return df.to_csv(index = False).encode("utf-8")

def mensagem_sucesso():
    sucesso = st.success("Arquivo baixado com sucesso!", icon="üëç")
    time.sleep(5)
    sucesso.empty()

st.title("DADOS BRUTOS")
url = "https://labdados.com/produtos"

response = requests.get(url)
# response = requests.get(url, params=query_string)
print(response.url)
dados = pd.DataFrame(response.json())

dados["Data da Compra"] = pd.to_datetime(dados["Data da Compra"], format="%d/%m/%Y")

with st.expander("Colunas"):
    colunas = st.multiselect('Seleciona as colunas', list(dados.columns), list(dados.columns))

st.sidebar.title("Filtros")

with st.sidebar.expander("Nome do produto"):
    produtos = st.multiselect("Selecione os produtos", dados["Produto"].unique(),dados["Produto"].unique())  
with st.sidebar.expander("Pre√ßo do produto"):
    preco = st.slider("Selecione os produtos", 0, 5000, (0, 5000) )  
with st.sidebar.expander("Data da compra"):
    data_compra = st.date_input("Selecione a data", (dados["Data da Compra"].min(), dados["Data da Compra"].max()) )  
with st.sidebar.expander("Vendedor"):
    vendedores = st.multiselect("Selecione os vendedores", dados["Vendedor"].unique(), dados["Vendedor"].unique() )  
with st.sidebar.expander("Local da compra"):
    local_compra = st.multiselect("Selecione o Local da compra", dados["Local da compra"].unique(), dados["Local da compra"].unique() )  


query = '''Produto in @produtos and \
    @preco[0] <= `Pre√ßo` <= @preco[1] and \
    @data_compra[0] <= `Data da Compra` <= @data_compra[1] and \
    Vendedor in @vendedores and `Local da compra` in @local_compra '''

dados_filtrados = dados.query(query)
dados_filtrados = dados_filtrados[colunas]
# if colunas:
#     dados = dados[[colunas]]
st.dataframe(dados_filtrados)

st.markdown(f'A tabela possui :blue[{dados_filtrados.shape[0]}] linhas e :blue[{dados_filtrados.shape[1]}] colunas')

st.markdown("Escreva um nome para o arquivo")

coluna1, coluna2 = st.columns(2)
with coluna1:
    nome_arquivo = st.text_input('', label_visibility="collapsed", value="dados")
    nome_arquivo +=".csv"
    
with coluna2:
    st.download_button("Fazer download tabela em CSV", data=converte_csv(dados_filtrados),file_name=nome_arquivo, mime="text/csv", on_click=mensagem_sucesso )
